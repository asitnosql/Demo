xquery version "1.0-ml";
(: xdmp:document-delete(cts:uris((),(),cts:directory-query("/C/", "infinity"))) :)

xdmp:document-add-collections(cts:uris((),(),cts:directory-query("/student/", "infinity")), "Student")
;
 fn:collection("Student")

========================================

xquery version "1.0-ml";
import module namespace search = "http://marklogic.com/appservices/search"  at "/MarkLogic/appservices/search/search.xqy";

search:search("Tom",
    <options xmlns="http://marklogic.com/appservices/search">
       <return-results>true</return-results>
     <options xmlns="http://marklogic.com/appservices/search">
</options>
    </options>)
    
    (:
    let $options := 
<search:options xmlns="http://marklogic.com/appservices/search">
 <default-suggestion-source>
    <range collation="http://marklogic.com/collation/" 
          type="xs:string" facet="true">
      <element ns="" name="name"/>
   </range>
 </default-suggestion-source>
</search:options>
return
search:suggest("To", $options)
    :)
=====================

xquery version "1.0-ml";
(: cts:search(fn:collection("Student"),
    cts:word-query("Tom"))
    :)
    
(:  cts:search(fn:doc(),cts:word-query("tom","case-insensitive"),"format-xml") :)
(:
cts:search(fn:doc(), cts:or-query((
                        cts:word-query("Geeta"),
                       
                          cts:word-query("Chennai")
                      )) :)
 (:                     
cts:search(fn:doc(), cts:and-not-query(
                        cts:word-query("Tom"),
                          cts:word-query("Chennai")
                      ))   :)                     
  (:           
 cts:search(fn:doc(), cts:element-query(
      xs:QName("name"),
      "Ram"))          
      :)
      
  (:           
 cts:search(fn:doc(), cts:element-value-query(
      xs:QName("name"),
      "Ram"))          
      :)
(:          
 cts:search(fn:doc(), cts:element-range-query(xs:QName("dob"), "<=",
      xs:date("2000-01-01"))
      
      :)
      
 (: cts:element-word-match(xs:QName("name"),"R*") :)  (: retuns matched word in text :)
(: 
 cts:search(fn:doc(),
    cts:element-attribute-value-query(
      xs:QName("student"),
      xs:QName("id"),
      "1"))
      :)
   (:
   cts:search(fn:doc(),
  cts:element-attribute-range-query(
      xs:QName("student"), xs:QName("id"), ">=",
      "3")) 
      :)
     
(: cts:element-value-match(xs:QName("name"),"r*") :) (: retuns complete value in text :)

(: cts:uri-match("*.xml", (), cts:element-value-query(
      xs:QName("name"),
      "Rihana"))
:)
(: cts:search(fn:doc(),cts:collection-query("Student")) :)

(: cts:uris((),(),cts:collection-query("Student")) :)
(:
 cts:search(fn:doc(),
    cts:near-query(
      (cts:word-query("she"),
      cts:word-query("basketball")),
      5))
:)
          
 cts:search(fn:doc(), cts:not-query( cts:element-query(
      xs:QName("name"),
      "tom")
      ))   
      

      